# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
- develop

jobs: 
- job: ius_build_base_Dockerfile
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: vtiusdev
      command: login
  - task: Docker@1
    displayName: 'Build an ius-build-base image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: 'ius-build-base/Dockerfile'
      imageName: 'ius-build-base:$(Build.BuildId)'
      includeLatestTag: true
  - task: Docker@1
    displayName: 'Push an ius-build-baseimage'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'ius-build-base:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  - task: Docker@1
    displayName: 'Push an ius-build-base latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'ius-build-base:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Build_Tools_Dockerfile
  pool:
      vmImage: 'ubuntu-latest'

  steps:
  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: vtiusdev
      command: login

  - task: Docker@1
    displayName: 'Build an autorest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: buildtools/Dockerfile
      imageName: 'buildtools:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push an autorest image '
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'buildtools:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push an autorest latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'buildtools:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Autorest_Dockerfile
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: vtiusdev
      command: login

  - task: Docker@1
    displayName: 'Build an autorest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: autorest/Dockerfile
      imageName: 'autorest:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push an autorest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'autorest:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push an autorest latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'autorest:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: ICONRelay_Autorest_Dockerfile
  pool:
      vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: 'login copy'
    inputs:
      containerRegistry: vtiusdev
      command: login

  - task: Docker@1
    displayName: 'Build an autorest image copy'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: 'iconrelay-autorest/Dockerfile'
      imageName: 'iconrelay-autorest:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push an autorest image copy'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'iconrelay-autorest:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push an autorest latest image copy'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'iconrelay-autorest:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Runtime_Dockerfile
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@1
    displayName: 'Build a runtime image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: runtime/Dockerfile
      imageName: 'dotnet-runtime:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push a runtime image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'dotnet-runtime:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push a runtime latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'dotnet-runtime:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Web_Dockerfile
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@1
    displayName: 'Build a web image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: web/Dockerfile
      imageName: 'web-build:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push a web image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'web-build:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push a web latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'web-build:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Service_Dockerfile
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@1
    displayName: 'Build a service image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: service/Dockerfile
      imageName: 'service-build:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push a service image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'service-build:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push a service latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'service-build:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: MDL_Dockerfile
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: vtiusdev
      command: login

  - task: Docker@1
    displayName: 'Build a mdl image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: mdl/Dockerfile
      imageName: 'mdl-build:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push a mdl image '
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'mdl-build:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push a mdl latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'mdl-build:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Custom_Error_Pages
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: vtiusdev
      command: login

  - task: Docker@1
    displayName: 'Build a custom-error image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: 'custom-errors/Dockerfile'
      imageName: 'custom-errors:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push a custom-errors image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'custom-errors:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push a custom-errors latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'custom-errors:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- job: Build_Dockerfile_Template
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: Docker@2
    displayName: login
    inputs:
      containerRegistry: vtiusdev
      command: login

  - task: Docker@1
    displayName: 'Build a dockerfile-template image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      dockerFile: 'buildtools/dockerfile-template/Dockerfile'
      imageName: 'dockerfile-template:$(Build.BuildId)'
      includeLatestTag: true

  - task: Docker@1
    displayName: 'Push a dockerfile-template image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'dockerfile-template:$(Build.BuildId)'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push a dockerfile-template latest image'
    inputs:
      azureSubscriptionEndpoint: Common
      azureContainerRegistry: $(registry)
      command: 'Push an image'
      imageName: 'dockerfile-template:latest'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))